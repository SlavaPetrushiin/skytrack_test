{"version":3,"sources":["components/Navbar.js","redux/actions.js","redux/types.js","components/Alert.js","pages/MainPage.js","components/PaginationImages.js","components/ImageList.js","api/storageApi.js","pages/HistoryPage.js","App.js","serviceWorker.js","redux/imagesReducer.js","api/requestImageApi.js","redux/sagas.js","redux/alertReducer.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","link","color","textDecoration","marginLeft","fontSize","fontWeight","letterSpacing","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","to","fetchImageSuccess","image","type","AlertError","props","Alert","severity","errorMessage","minWidth","media","height","paddingTop","MainPage","error","useSelector","state","Card","CardContent","CardMedia","component","url","CardActions","Button","onClick","handleClick","MainPageContainer","dispatch","useDispatch","images","useEffect","PaginationImages","paginationImagesCount","handleClickPagination","Pagination","count","onChange","imageItems","padding","imageItem","listStyle","marginBottom","ImageBlock","date","handleDeleteImage","ImageList","map","key","id","e","storageApi","KEYS","getImages","localStorage","getItem","this","JSON","parse","setItem","stringify","saveImages","newImages","removeImage","filter","HistoryPage","HistoryPageContainer","useState","quantityImages","currentPagination","setCurrentPagination","Math","ceil","length","currentImages","slice","event","page","deleteImages","storage","container","App","downloadImages","Container","maxWidth","exact","path","Boolean","window","location","hostname","match","initialState","imagesReducer","action","requestImageApi","getImage","fetch","sagaWatcher","requestImagesSaga","takeEvery","call","fetchImage","payload","image_url","Date","toString","put","message","a","response","json","data","alertReducer","saga","createSagaMiddleware","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e45b233f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        link:{\r\n            color: 'white',\r\n            textDecoration: 'none',\r\n            marginLeft: 20,\r\n            fontSize: '1.25rem',\r\n            fontWeight: 500,\r\n            letterSpacing: '0.0075em'\r\n        }\r\n    }),\r\n);\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <ImageIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Images\r\n                    </Typography>\r\n                    <Link className={classes.link} to={'/'}>Главная</Link>\r\n                    <Link className={classes.link} to={'/history'}>История</Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import {DELETE_IMAGE, DOWNLOAD_IMAGES, FETCH_IMAGE_ERROR, FETCH_IMAGE_SUCCESS, REQUEST_IMAGE} from \"./types\";\r\n\r\nexport const fetchImageSuccess = (image) => {\r\n    return {\r\n        type: FETCH_IMAGE_SUCCESS,\r\n        image\r\n    }\r\n};\r\n\r\nexport const fetchImageError = (error) => {\r\n    return {\r\n        type: FETCH_IMAGE_ERROR,\r\n        error\r\n    }\r\n};\r\n\r\nexport const fetchImage = () => {\r\n    return {\r\n        type: REQUEST_IMAGE,\r\n    }\r\n};\r\n\r\nexport const downloadImages = (images) => {\r\n    return {\r\n        type: DOWNLOAD_IMAGES,\r\n        images\r\n    }\r\n};\r\n\r\nexport const deleteImages = (id) => {\r\n    return {\r\n        type: DELETE_IMAGE,\r\n        id\r\n    }\r\n};","export const FETCH_IMAGE_SUCCESS = 'FETCH_IMAGE_SUCCESS';\r\nexport const FETCH_IMAGE_ERROR = 'FETCH_IMAGE_ERROR';\r\nexport const REQUEST_IMAGE = 'REQUEST_IMAGE';\r\nexport const DOWNLOAD_IMAGES = 'DOWNLOAD_IMAGES';\r\nexport const DELETE_IMAGE = 'DELETE_IMAGE';\r\n\r\n","import React from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst AlertError = (props) => {\r\n    return (\r\n        <Alert severity=\"error\">{props.errorMessage}</Alert>\r\n    );\r\n};\r\n\r\nexport default AlertError;","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchImage} from \"../redux/actions\";\r\nimport AlertError from \"../components/Alert\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%',\r\n    },\r\n});\r\n\r\nconst MainPageContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const image = useSelector(state => state.images);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchImage())\r\n    }, [dispatch]);\r\n\r\n    const handleClick = () => {\r\n        dispatch(fetchImage())\r\n    };\r\n\r\n    return <MainPage image={image} handleClick={handleClick}/>\r\n};\r\n\r\n\r\nconst MainPage = (props) => {\r\n    const classes = useStyles();\r\n    const error = useSelector(state => state.error.errorMessage);\r\n\r\n    return (\r\n        <>\r\n            {!!error && <AlertError errorMessage={error}/>}\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <CardMedia\r\n                        component={'div'}\r\n                        className={classes.media}\r\n                        image={props.image.image.url}\r\n                    />\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={props.handleClick}\r\n                    >\r\n                        Загрузить\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPageContainer;\r\n\r\n","import React from 'react';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nconst PaginationImages = ({paginationImagesCount, handleClickPagination}) => {\r\n        return (\r\n            <Pagination\r\n                count={paginationImagesCount}\r\n                onChange={handleClickPagination}\r\n                color=\"primary\"\r\n            />\r\n        );\r\n};\r\n\r\nexport default PaginationImages;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n    imageItems: {\r\n        padding: 0,\r\n    },\r\n    imageItem: {\r\n        padding: 0,\r\n        listStyle: 'none',\r\n        marginBottom: 30\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '46.25%',\r\n        marginBottom: 20\r\n    },\r\n    title: {\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\n\r\nconst ImageBlock = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <li className={classes.imageItem}>\r\n            <p className={classes.title}>{props.title}</p>\r\n            <p>{props.date}</p>\r\n            <CardMedia\r\n                component={'div'}\r\n                className={classes.media}\r\n                image={props.url}\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={props.handleDeleteImage}\r\n            >\r\n                Удалить\r\n            </Button>\r\n        </li>\r\n    )\r\n};\r\n\r\nconst ImageList = ({images, handleDeleteImage}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <ul className={classes.imageItems}>\r\n            {\r\n                images.map(image => <ImageBlock\r\n                    {...image}\r\n                    key={image.id}\r\n                    handleDeleteImage={(e) => handleDeleteImage(e, image.id)}\r\n                />)\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ImageList;","const storageApi = {\r\n    KEYS: {\r\n        images: \"images\"\r\n    },\r\n\r\n    getImages(){\r\n        if(!localStorage.getItem(this.KEYS.images)){\r\n            localStorage.setItem (\"images\", JSON.stringify([]));\r\n            return false;\r\n        }\r\n        const images = JSON.parse(localStorage.getItem(this.KEYS.images));\r\n        return images;\r\n    },\r\n\r\n    saveImages(image) {\r\n        if(!!this.getImages()){\r\n            const images = this.getImages();\r\n            const newImages = [...images, image];\r\n            localStorage.setItem (this.KEYS.images, JSON.stringify(newImages));\r\n        }\r\n    },\r\n\r\n    removeImage(id){\r\n        const images = this.getImages();\r\n        const newImages = images.filter(image => image.id !== id);\r\n        localStorage.setItem (this.KEYS.images, JSON.stringify(newImages));\r\n    }\r\n};\r\n\r\nexport default storageApi;","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport PaginationImages from \"../components/PaginationImages\";\r\nimport ImageList from \"../components/ImageList\";\r\nimport {deleteImages} from \"../redux/actions\";\r\nimport storage from \"../api/storageApi\";\r\n\r\nconst HistoryPageContainer = () => {\r\n    const images = useSelector(state => state.images);\r\n    const dispatch = useDispatch();\r\n    const [quantityImages] = useState(5);\r\n    const [currentPagination, setCurrentPagination] = useState(1);\r\n    const paginationImagesCount = Math.ceil(images.images.length / quantityImages);\r\n\r\n    const currentImages = currentPagination * quantityImages;\r\n    const newImages = images.images.slice((currentPagination - 1) * quantityImages, currentImages);\r\n\r\n    const handleClickPagination = (event, page) => {\r\n        setCurrentPagination(page);\r\n    };\r\n\r\n    const handleDeleteImage = (event, id) => {\r\n        dispatch(deleteImages(id));\r\n        storage.removeImage(id);\r\n    };\r\n\r\n    return <HistoryPage\r\n        handleClickPagination={handleClickPagination}\r\n        newImages={newImages}\r\n        paginationImagesCount={paginationImagesCount}\r\n        handleDeleteImage={handleDeleteImage}\r\n    />\r\n};\r\n\r\nconst HistoryPage = ({handleClickPagination, newImages, paginationImagesCount, handleDeleteImage}) => {\r\n    return (\r\n        <div>\r\n            <PaginationImages\r\n                handleClickPagination={handleClickPagination}\r\n                paginationImagesCount={paginationImagesCount}\r\n            />\r\n            <ImageList images={newImages} handleDeleteImage={handleDeleteImage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HistoryPageContainer;","import React, {useEffect} from 'react';\nimport ButtonAppBar from \"./components/Navbar\";\nimport MainPageContainer from \"./pages/MainPage\";\nimport HistoryPageContainer from \"./pages/HistoryPage\";\nimport Container from '@material-ui/core/Container';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Route, Switch} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\nimport {downloadImages} from \"./redux/actions\";\nimport storageApi from \"./api/storageApi\";\n\nconst useStyles = makeStyles({\n    container: {\n        paddingTop: 40,\n    }\n});\n\nfunction App() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(storageApi.getImages()){\n            const images = storageApi.getImages();\n            dispatch(downloadImages(images));\n        }\n    }, [dispatch]);  //\n\n    return (\n        <div>\n            <ButtonAppBar/>\n\n            {/*{!!error && <AlertError errorMessage={error}/>}*/}\n\n            <Container maxWidth=\"sm\" className={classes.container}>\n                <Switch>\n                    <Route exact path=\"/\" component={MainPageContainer}/>\n                    <Route path=\"/history\" component={HistoryPageContainer}/>\n                </Switch>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {DELETE_IMAGE, DOWNLOAD_IMAGES, FETCH_IMAGE_SUCCESS} from \"./types\";\r\n\r\nconst initialState = {\r\n    image: {},\r\n    images: [],\r\n};\r\n\r\nconst imagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_IMAGE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                image: action.image,\r\n                images: [...state.images, action.image],\r\n                error: null\r\n            };\r\n        case DOWNLOAD_IMAGES:\r\n            return {\r\n                ...state,\r\n                images:  [...action.images],\r\n                error: null\r\n            };\r\n        case DELETE_IMAGE:\r\n            return {\r\n                ...state,\r\n                images:  state.images.filter((image) => {\r\n                    return image.id !== action.id\r\n                }),\r\n                error: null\r\n            };\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\nexport default imagesReducer;","const requestImageApi = {\r\n    getImage(){\r\n        return fetch('https://api.giphy.com/v1/gifs/random?api_key=gR30u9O8KPOanwIQupHbD90d4k57EOeY')\r\n    }\r\n};\r\n\r\nexport default requestImageApi;","import {takeEvery, put, call} from \"redux-saga/effects\";\r\nimport {REQUEST_IMAGE} from \"./types\";\r\nimport {fetchImageError, fetchImageSuccess} from \"./actions\";\r\nimport requestImageApi from \"../api/requestImageApi\";\r\nimport storageApi from \"../api/storageApi\";\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_IMAGE, requestImagesSaga)\r\n}\r\n\r\nfunction* requestImagesSaga() {\r\n    try{\r\n        const payload = yield call(fetchImage);\r\n\r\n        const image = {\r\n            id: payload.image_url,\r\n            title: payload.title,\r\n            date: new Date().toString(),\r\n            url: payload.image_url\r\n        };\r\n\r\n        yield call(()=> storageApi.saveImages(image));\r\n\r\n        yield put(fetchImageSuccess(image));\r\n    }\r\n    catch (error) {\r\n        yield put(fetchImageError(error.message));\r\n    }\r\n}\r\n\r\nasync function fetchImage(){\r\n    const response = await requestImageApi.getImage();\r\n    const json = (await response.json()).data;\r\n    return json;\r\n}","import {FETCH_IMAGE_ERROR} from \"./types\";\r\n\r\nconst initialState = {\r\n    errorMessage: null\r\n};\r\n\r\nconst alertReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_IMAGE_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default alertReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport imagesReducer from \"./imagesReducer\";\r\nimport {sagaWatcher} from \"./sagas\";\r\nimport alertReducer from \"./alertReducer\";\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst rootReducer = combineReducers({\r\n    images: imagesReducer,\r\n    error: alertReducer\r\n    });\r\n\r\nconst store = createStore(rootReducer, compose(\r\n    applyMiddleware(\r\n        saga\r\n    ),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nsaga.run(sagaWatcher);\r\n\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}